#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;

void calculateLRUPageFaults(int pages[], int n, int capacity) {
    list<int> memory;
    unordered_map<int, list<int>::iterator> pageMap;
    int pageFaults = 0;

    cout << "\nStep-by-step memory state:\n";
    for (int i = 0; i < n; i++) {
        int currentPage = pages[i];

        if (pageMap.find(currentPage) == pageMap.end()) {
            pageFaults++;

            if (memory.size() == capacity) {
                int lruPage = memory.back();
                memory.pop_back();
                pageMap.erase(lruPage);
            }
        } else {
            memory.erase(pageMap[currentPage]);
        }

        memory.push_front(currentPage);
        pageMap[currentPage] = memory.begin();

        cout << "Step " << i + 1 << " - Memory: ";
        for (int page : memory) {
            cout << page << " ";
        }
        cout << endl;
    }

    cout << "\nTotal Page Faults: " << pageFaults << endl;
}

int main() {
    int n, capacity;

    cout << "Enter the number of pages: ";
    cin >> n;

    int pages[n];
    cout << "Enter the page reference sequence:\n";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }

    cout << "Enter the capacity of memory (number of frames): ";
    cin >> capacity;

    calculateLRUPageFaults(pages, n, capacity);

    return 0;
}
