#include <iostream>
#include <pthread.h>
#include <vector>

using namespace std;

struct MatrixData {
    int row;
    int col;
    vector<vector<int>> A;
    vector<vector<int>> B;
    vector<vector<int>> result;
};

void* matrixMultiply(void* arg) {
    MatrixData* data = (MatrixData*) arg;
    int row = data->row;
    int col = data->col;
    int sum = 0;

    for (int k = 0; k < col; k++) {
        sum += data->A[row][k] * data->B[k][col];
    }
    data->result[row][col] = sum;
    return nullptr;
}

int main() {
    int row1, col1, row2, col2;
    
    cout << "Enter dimensions for Matrix A (rows cols): ";
    cin >> row1 >> col1;
    cout << "Enter dimensions for Matrix B (rows cols): ";
    cin >> row2 >> col2;

    if (col1 != row2) {
        cout << "Matrix multiplication is not possible!" << endl;
        return -1;
    }

    vector<vector<int>> A(row1, vector<int>(col1));
    vector<vector<int>> B(row2, vector<int>(col2));
    vector<vector<int>> result(row1, vector<int>(col2, 0));

    cout << "Enter elements for Matrix A:" << endl;
    for (int i = 0; i < row1; i++) {
        for (int j = 0; j < col1; j++) {
            cin >> A[i][j];
        }
    }

    cout << "Enter elements for Matrix B:" << endl;
    for (int i = 0; i < row2; i++) {
        for (int j = 0; j < col2; j++) {
            cin >> B[i][j];
        }
    }

    pthread_t threads[row1][col2];
    MatrixData data[row1][col2];

    for (int i = 0; i < row1; i++) {
        for (int j = 0; j < col2; j++) {
            data[i][j] = {i, j, A, B, result};
            pthread_create(&threads[i][j], nullptr, matrixMultiply, &data[i][j]);
        }
    }

    for (int i = 0; i < row1; i++) {
        for (int j = 0; j < col2; j++) {
            pthread_join(threads[i][j], nullptr);
        }
    }

    cout << "Result Matrix:" << endl;
    for (int i = 0; i < row1; i++) {
        for (int j = 0; j < col2; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
