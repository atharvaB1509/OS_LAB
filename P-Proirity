#include <iostream>
#include <vector>
#include <climits>
using namespace std;

struct Process {
    int pid, at, bt, remaining_bt, priority, ft, tat, wt;
};

void calculatePreemptivePriority(vector<Process> &processes) {
    int n = processes.size(), completed = 0, time = 0;
    int min_priority_index = -1;
    bool found;

    while (completed < n) {
        found = false;
        int min_priority = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (processes[i].at <= time && processes[i].remaining_bt > 0 && processes[i].priority < min_priority) {
                found = true;
                min_priority = processes[i].priority;
                min_priority_index = i;
            }
        }

        if (found) {
            time++;
            processes[min_priority_index].remaining_bt--;

            if (processes[min_priority_index].remaining_bt == 0) {
                completed++;
                processes[min_priority_index].ft = time;
                processes[min_priority_index].tat = processes[min_priority_index].ft - processes[min_priority_index].at;
                processes[min_priority_index].wt = processes[min_priority_index].tat - processes[min_priority_index].bt;
            }
        } else {
            time++;
        }
    }
}

void displayProcesses(const vector<Process> &processes) {
    cout << "Processes  Arrival  Burst  Priority  Finish  Turnaround  Waiting\n";
    for (const auto &p : processes) {
        cout << "   " << p.pid << "\t    " << p.at << "\t  "
             << p.bt << "\t  " << p.priority << "\t     " << p.ft << "\t     "
             << p.tat << "\t     " << p.wt << "\n";
    }
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        cout << "Process " << processes[i].pid << " Arrival Time: ";
        cin >> processes[i].at;
        cout << "Process " << processes[i].pid << " Burst Time: ";
        cin >> processes[i].bt;
        cout << "Process " << processes[i].pid << " Priority: ";
        cin >> processes[i].priority;
        processes[i].remaining_bt = processes[i].bt;
    }

    calculatePreemptivePriority(processes);

    cout << "\nPreemptive Priority Scheduling Results:\n";
    displayProcesses(processes);

    float total_wt = 0, total_tat = 0;
    for (const auto &p : processes) {
        total_wt += p.wt;
        total_tat += p.tat;
    }
    cout << "\nAverage Waiting Time = " << total_wt / n;
    cout << "\nAverage Turnaround Time = " << total_tat / n << endl;

    return 0;
}
