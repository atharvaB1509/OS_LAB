#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

int findFarthestFuture(vector<int>& pages, vector<int>& memory, int currentIndex) {
    int farthestIndex = -1, farthestDistance = -1;
    for (int i = 0; i < memory.size(); i++) {
        int distance = -1;
        for (int j = currentIndex + 1; j < pages.size(); j++) {
            if (pages[j] == memory[i]) {
                distance = j;
                break;
            }
        }
        if (distance == -1) return i;
        if (distance > farthestDistance) {
            farthestDistance = distance;
            farthestIndex = i;
        }
    }
    return farthestIndex;
}

void calculateOptimalPageFaults(vector<int>& pages, int capacity) {
    unordered_set<int> memorySet;
    vector<int> memory;
    int pageFaults = 0;

    for (int i = 0; i < pages.size(); i++) {
        if (memorySet.find(pages[i]) == memorySet.end()) {
            pageFaults++;
            if (memory.size() == capacity) {
                int victimIndex = findFarthestFuture(pages, memory, i);
                memorySet.erase(memory[victimIndex]);
                memory[victimIndex] = pages[i];
            } else {
                memory.push_back(pages[i]);
            }
            memorySet.insert(pages[i]);
        }
    }

    cout << "Total Page Faults: " << pageFaults << endl;
}

int main() {
    int n, capacity;

    cout << "Enter the number of pages: ";
    cin >> n;

    vector<int> pages(n);
    cout << "Enter the page reference sequence:\n";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }

    cout << "Enter the capacity of memory (number of frames): ";
    cin >> capacity;

    calculateOptimalPageFaults(pages, capacity);

    return 0;
}
